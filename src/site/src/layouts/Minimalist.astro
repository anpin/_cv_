---
import "@fontsource/dm-mono";
import Download from "../components/Download.astro";
import Key from "../components/Key.astro";
import "../styles.css";
import "../cv-styles.css";

type SidebarLink = {
  label: string;
  value: string;
  href?: string;
};

type SidebarHighlight = {
  title: string;
  items: string[];
};

type SidebarPhoto = {
  src?: string;
  alt?: string;
  initials?: string;
};

type SidebarConfig = {
  intro?: string;
  photo?: SidebarPhoto;
  details?: SidebarLink[];
  contact?: SidebarLink[];
  keywords?: string[];
  highlights?: SidebarHighlight[];
};

type Props = {
  frontmatter: {
    title: string;
    pdfLink: string;
    publickey: string;
    noIndex?: boolean;
    description?: string;
    sidebar?: SidebarConfig;
  };
};

const { PDF_VIEW, FORCE_THEME = "" } = import.meta.env;

const frontmatter = Astro.props.frontmatter as Props["frontmatter"];
const { title, noIndex, description, pdfLink, publickey, sidebar } =
  frontmatter;
const hasSidebarContent = Boolean(
  sidebar &&
    (sidebar.intro ||
      sidebar.photo ||
      (sidebar.details && sidebar.details.length > 0) ||
      (sidebar.contact && sidebar.contact.length > 0) ||
      (sidebar.keywords && sidebar.keywords.length > 0) ||
      (sidebar.highlights && sidebar.highlights.length > 0))
);
const fallbackName = title.split(" - ")[0]?.trim() || title;
const photoInitials =
  sidebar?.photo?.initials ||
  fallbackName
    .split(/\s+/)
    .slice(0, 2)
    .map((word) => word?.[0]?.toUpperCase() || "")
    .join("") ||
  "PA";
const photoAlt =
  sidebar?.photo?.alt || `${fallbackName} portrait placeholder`;
const photoSrc = sidebar?.photo?.src;
const showSidebarPhoto = Boolean(sidebar && (photoSrc || sidebar.photo));
---

<!doctype html>
<html lang="en" class={FORCE_THEME}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description || title} />
    {noIndex && <meta name="robots" content="noindex" />}
    <title>{title}</title>
  </head>
  <body class={!PDF_VIEW ? "bg-futuristic" : ""}>
    {!PDF_VIEW && 
    (<div class="controls-menu">
      <button id="themeToggle" class="control-btn" aria-label="Toggle Theme">
        <span class="control-icon theme-icon"></span>
        <span class="control-tooltip" style="left: 46px">Theme: Dark</span>
      </button>
    </div>)
    }

    <div class="container mx-auto flex justify-center py-8">
      <article class="cv-container relative">
        {
          !PDF_VIEW && (
            <div class="not-prose absolute right-4 top-4">
              <Download href={pdfLink} />
            </div>
          )
        }
        {
          !PDF_VIEW && (
            <div class="not-prose absolute right-12 top-4">
              <Key href={publickey} />
            </div>
          )
        }
        <div class={`cv-layout${hasSidebarContent ? "" : " cv-layout--single"}`}>
          <main class="cv-main">
            <slot />
          </main>
          {hasSidebarContent && (
            <aside class="cv-sidebar" aria-label="Professional highlights">
              {showSidebarPhoto && (
                <div class="cv-sidebar-photo">
                  {photoSrc ? (
                    <img
                      src={photoSrc}
                      alt={photoAlt}
                      loading="lazy"
                      class="cv-sidebar-photo-img"
                    />
                  ) : (
                    <div
                      class="cv-sidebar-photo-placeholder"
                      role="img"
                      aria-label={photoAlt}
                    >
                      <span>{photoInitials}</span>
                    </div>
                  )}
                </div>
              )}

              {sidebar?.intro && (
                <p class="cv-sidebar-intro">{sidebar.intro}</p>
              )}

              {sidebar?.details && sidebar.details.length > 0 && (
                <section class="cv-sidebar-section">
                  <h2>Details</h2>
                  <dl class="cv-sidebar-details">
                    {sidebar.details.map((detail) => (
                      <div class="cv-sidebar-detail">
                        <dt>{detail.label}</dt>
                        <dd>
                          {detail.href ? (
                            <a href={detail.href} class="cv-sidebar-link">
                              {detail.value}
                            </a>
                          ) : (
                            detail.value
                          )}
                        </dd>
                      </div>
                    ))}
                  </dl>
                </section>
              )}

              {sidebar?.contact && sidebar.contact.length > 0 && (
                <section class="cv-sidebar-section">
                  <h2>Contact</h2>
                  <ul class="cv-sidebar-contact">
                    {sidebar.contact.map((item) => (
                      <li>
                        <span class="cv-sidebar-contact-label">{item.label}</span>
                        {item.href ? (
                          <a href={item.href} class="cv-sidebar-link">
                            {item.value}
                          </a>
                        ) : (
                          <span class="cv-sidebar-contact-value">{item.value}</span>
                        )}
                      </li>
                    ))}
                  </ul>
                </section>
              )}

              {sidebar?.keywords && sidebar.keywords.length > 0 && (
                <section class="cv-sidebar-section">
                  <h2>Keywords</h2>
                  <div class="cv-sidebar-keywords">
                    {sidebar.keywords.map((keyword) => (
                      <span class="cv-sidebar-keyword">{keyword}</span>
                    ))}
                  </div>
                </section>
              )}

              {sidebar?.highlights && sidebar.highlights.length > 0 && (
                <section class="cv-sidebar-section cv-sidebar-highlights">
                  {sidebar.highlights.map((highlight) => (
                    <div class="cv-sidebar-highlight">
                      <h3>{highlight.title}</h3>
                      <ul class="cv-sidebar-highlight-list">
                        {highlight.items.map((item) => (
                          <li>{item}</li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </section>
              )}
            </aside>
          )}
        </div>
      </article>
    </div>

    <script>
      // Simple theme toggle without animations
      document.addEventListener('DOMContentLoaded', () => {
        const themeToggle = document.getElementById('themeToggle');
        const themeTooltip = themeToggle?.querySelector('.control-tooltip');
        let darkTheme = true;

        // Initialize theme from localStorage
        const storedThemePref = localStorage.getItem('darkTheme');
        if (storedThemePref !== null) {
          darkTheme = storedThemePref === 'true';
          updateTheme();
        }

        // Theme toggle functionality
        themeToggle?.addEventListener('click', () => {
          darkTheme = !darkTheme;
          localStorage.setItem('darkTheme', String(darkTheme));
          updateTheme();
        });

        function updateTheme() {
          if (darkTheme) {
            document.documentElement.classList.remove('light-theme');
            if (themeTooltip) themeTooltip.textContent = 'Theme: Dark';
          } else {
            document.documentElement.classList.add('light-theme');
            if (themeTooltip) themeTooltip.textContent = 'Theme: Light';
          }
        }
      });
    </script>
  </body>
</html>
