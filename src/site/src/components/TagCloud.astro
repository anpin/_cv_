---
interface Props {
  tags: string[];
  activeTag?: string;
}

const { tags, activeTag } = Astro.props;
---

<div class="tag-cloud">
  <div class="tag-cloud-header">Filter by topic:</div>
  <div class="tags-container">
    <a
      href="/blog"
      class:list={[
        "tag-item",
        !activeTag ? "tag-active" : "",
      ]}
    >
      All
    </a>
    {
      tags.map((tag) => (
        <a
          href={`/blog/tag/${tag}`}
          class:list={[
            "tag-item",
            activeTag === tag ? "tag-active" : "",
          ]}
        >
          {tag}
        </a>
      ))
    }
  </div>
</div>

<style>
  .tag-cloud {
    margin-bottom: 2rem;
  }
  
  .tag-cloud-header {
    font-size: 0.875rem;
    color: rgba(227, 227, 227, 0.7);
    margin-bottom: 0.75rem;
    font-family: monospace;
  }
  
  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag-item {
    display: inline-block;
    padding: 0.4rem 0.8rem;
    background: rgba(15, 17, 26, 0.6);
    border: 1px solid rgba(39, 69, 255, 0.3);
    border-radius: 4px;
    color: #e3e3e3;
    text-decoration: none;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }
  
  .tag-item::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    height: 2px;
    width: 100%;
    background: linear-gradient(90deg, rgba(39, 69, 255, 0.6), rgba(255, 107, 53, 0.6));
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.3s ease;
  }
  
  .tag-item:hover {
    background: rgba(39, 69, 255, 0.2);
  }
  
  .tag-item:hover::after {
    transform: scaleX(1);
  }
  
  .tag-active {
    background: rgba(255, 107, 53, 0.2);
    border-color: rgba(255, 107, 53, 0.5);
  }
  
  .tag-active::after {
    background: rgba(255, 107, 53, 0.8);
    transform: scaleX(1);
  }
</style>
</div>

<script>
  const tagButtons = document.querySelectorAll('.badge');
  const blogPosts = document.querySelectorAll('.blog-post');
  
  tagButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      const selectedTag = button.textContent?.trim().toLowerCase();
      
      // Update active state of tags
      tagButtons.forEach(btn => {
        btn.classList.remove('badge-primary');
        btn.classList.add('badge-outline');
      });
      button.classList.remove('badge-outline');
      button.classList.add('badge-primary');
      
      // Filter posts
      blogPosts.forEach(post => {
        const tags = post.getAttribute('data-tags')?.toLowerCase().split(',') || [];
        if (selectedTag === 'all' || (selectedTag && tags.includes(selectedTag))) {
          post.classList.remove('hidden');
        } else {
          post.classList.add('hidden');
        }
      });
    });
  });
</script>
